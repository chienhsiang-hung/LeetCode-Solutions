'''
[3,6,7,11], 1, 11
1+11+1 // 2 = 6, 1+1+2+2 = 6 < 8
1+6+1 // 2 = 4, 1+2+2+3 = 8 == 8
1+4+1 // 2 = 3, 1+2+3+4 = 9 > 8
3+4+1 // 2 = 4, 1+2+2+3 = 8 == 8

1+11 // 2 = 6, 1+1+2+2 = 6 < 8
1+6 // 2 = 3, 1+2+3+4 = 10 > 8
3+6 // 2 = 4, 1+2+2+3 = 8 == 8

1+11 // 2 = 6, 1+1+2+2 = 6 < 8
1+6 // 2 = 3, 1+2+3+4 = 10 > 8
3+6+1 // 2 = 5, 1+2+2+3 = 8 == 8
3+5 // 2 = 4, 1+2+2+3 = 8 == 8

[30,11,23,4,20], 1, 30
1+30+1 // 2 = 16, 2+1+2+1+2 = 8 > 6
16+30+1 // 2 = 23, 2+1+1+1+1 = 6 == 6
'''
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        l = 1
        r = max(piles)

        ans = r
        while l < r:
            mid = (l + r) // 2
            rd = 0
            for p in piles:
                rd += p / mid if p % mid == 0 else p // mid +1
            if rd <= h:
                ans = min(ans, mid)
                r = mid # turn left
            else:
                l = mid +1 # turn right
        return ans
